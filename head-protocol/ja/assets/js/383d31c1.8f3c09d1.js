"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[4097],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),o=n(86010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(87462),o=n(67294),r=n(86010),i=n(12466),l=n(16550),s=n(91980),d=n(67392),c=n(50012);function u(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=p(e),[i,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,d]=m({queryString:n,groupId:a}),[u,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),b=(()=>{const e=s??u;return h({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),k(e)}),[d,k,r]),tabValues:r}}var b=n(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:d}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=d[n].value;a!==l&&(u(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},d.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:h,onClick:p},i,{className:(0,r.Z)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=k(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",y.tabList)},o.createElement(g,(0,a.Z)({},e,t)),o.createElement(f,(0,a.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return o.createElement(w,(0,a.Z)({key:String(t)},e))}},42123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=n(87462),o=(n(67294),n(3905)),r=n(74866),i=n(85162);const l={sidebar_position:2},s="Tutorial",d={unversionedId:"tutorial/index",id:"tutorial/index",title:"Tutorial",description:"This tutorial will show you how to use hydra-node on the preprod Cardano",source:"@site/docs/tutorial/index.md",sourceDirName:"tutorial",slug:"/tutorial/",permalink:"/head-protocol/ja/docs/tutorial/",draft:!1,editUrl:"https://github.com/input-output-hk/hydra/tree/master/docs/docs/tutorial/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Glossary",permalink:"/head-protocol/ja/docs/getting-started/glossary"},next:{title:"Haskell\u30d1\u30c3\u30b1\u30fc\u30b8",permalink:"/head-protocol/ja/docs/haskell_packages"}},c={},u=[{value:"What you will need",id:"what-you-will-need",level:2},{value:"Step 0: Installation",id:"step-0-installation",level:2},{value:"Step 1: Connect to Cardano",id:"step-1-connect-to-cardano",level:2},{value:"Step 2: Prepare keys and funding",id:"step-2-prepare-keys-and-funding",level:2},{value:"Step 3: Start the Hydra node",id:"step-3-start-the-hydra-node",level:2},{value:"Step 4: Open a Hydra head",id:"step-4-open-a-hydra-head",level:2},{value:"Step 5: Using the Hydra head",id:"step-5-using-the-hydra-head",level:2},{value:"Step 6: Closing the Hydra head",id:"step-6-closing-the-hydra-head",level:2},{value:"Bonus: Be a good citizen",id:"bonus-be-a-good-citizen",level:2}],p={toc:u},h="wrapper";function m(e){let{components:t,...l}=e;return(0,o.kt)(h,(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tutorial"},"Tutorial"),(0,o.kt)("p",null,"This tutorial will show you how to use ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," on the ",(0,o.kt)("inlineCode",{parentName:"p"},"preprod")," Cardano\nnetwork to open a layer-two state channel between two actors using the Hydra\nHead protocol. We will also use ",(0,o.kt)("a",{parentName:"p",href:"https://mithril.network"},"Mithril")," to bootstrap\nour nodes for a speedy setup."),(0,o.kt)("p",null,"This setup is also known as the ",(0,o.kt)("a",{parentName:"p",href:"/topologies/basic"},"Basic Hydra Head"),' topology\nand we will be creating the "green" Hydra Head between ',(0,o.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Y")," as shown\nbelow:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(11853).Z,width:"1677",height:"931"})),(0,o.kt)("h2",{id:"what-you-will-need"},"What you will need"),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Terminal access to a machine that can connect to and can be reached from the internet."),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Either",(0,o.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","someone else following this tutorial as well to connect to (recommended), or"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","two such machines (or you can run it on one machine)."))),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","100 tADA in a wallet on ",(0,o.kt)("inlineCode",{parentName:"li"},"preprod")," (per participant)")),(0,o.kt)("h2",{id:"step-0-installation"},"Step 0: Installation"),(0,o.kt)("p",null,"Required tools, this tutorial assumes to be available on your system:"),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,o.kt)("inlineCode",{parentName:"li"},"curl")),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,o.kt)("inlineCode",{parentName:"li"},"tar")),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,o.kt)("inlineCode",{parentName:"li"},"unzip")),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/vi/websocat"},(0,o.kt)("inlineCode",{parentName:"a"},"websocat"))),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,o.kt)("a",{parentName:"li",href:"https://jqlang.github.io/jq/"},(0,o.kt)("inlineCode",{parentName:"a"},"jq")))),(0,o.kt)("p",null,"We will start with downloading pre-built binaries of the involved software\ncomponents of the Cardano ecosystem, putting them in a ",(0,o.kt)("inlineCode",{parentName:"p"},"bin/")," directory:"),(0,o.kt)(r.Z,{queryString:"system",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"linux",label:"Linux x86-64",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p bin\ncurl -L -O https://github.com/input-output-hk/hydra/releases/download/0.12.0/hydra-x86_64-unknown-linux-musl.zip\nunzip -d bin hydra-x86_64-unknown-linux-musl.zip\ncurl -L -o - https://github.com/input-output-hk/cardano-node/releases/download/8.1.2/cardano-node-8.1.2-linux.tar.gz \\\n  | tar xz -C bin ./cardano-node ./cardano-cli\ncurl -L -o - https://github.com/input-output-hk/mithril/releases/download/2331.1/mithril-2331.1-linux-x64.tar.gz \\\n  | tar xz -C bin mithril-client\nchmod +x bin/*\n"))),(0,o.kt)(i.Z,{value:"macos",label:"Mac OS aarch64",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p bin\ncurl -L -o - https://github.com/input-output-hk/hydra/releases/download/0.12.0/tutorial-binaries-aarch64-darwin.tar.gz \\\n  | tar xz -C bin\n")))),(0,o.kt)("p",null,"We also need to define various environment variables that will simplify our commands. Make sure each terminal you'll be opening to run those commands has those environment variables defined."),(0,o.kt)(r.Z,{queryString:"system",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"linux",label:"Linux x86-64",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export PATH=$(pwd)/bin:$PATH\nexport GENESIS_VERIFICATION_KEY=$(curl https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/release-preprod/genesis.vkey 2> /dev/null)\nexport AGGREGATOR_ENDPOINT=https://aggregator.release-preprod.api.mithril.network/aggregator\nexport CARDANO_NODE_SOCKET_PATH=$(pwd)/node.socket\nexport CARDANO_NODE_NETWORK_ID=1\n"))),(0,o.kt)(i.Z,{value:"macos",label:"Mac OS aarch64",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export PATH=$(pwd)/bin:$PATH\nexport GENESIS_VERIFICATION_KEY=$(curl https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/release-preprod/genesis.vkey 2> /dev/null)\nexport AGGREGATOR_ENDPOINT=https://aggregator.release-preprod.api.mithril.network/aggregator\nexport CARDANO_NODE_SOCKET_PATH=$(pwd)/node.socket\nexport CARDANO_NODE_NETWORK_ID=1\nexport DYLD_FALLBACK_LIBRARY_PATH=$(pwd)/bin\n")))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Other installation options"),(0,o.kt)("p",null,"There are other ways to acquire and run the Cardano, Mithril, and Hydra\nnodes which might be better suited depending on your environment:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Docker containers are published regularly,"),(0,o.kt)("li",{parentName:"ul"},"Some projects provide system-level packages for installation and/or pre-built binaries for various platforms,"),(0,o.kt)("li",{parentName:"ul"},"Building from source is always an option.")),(0,o.kt)("p",null,"Please check-out each project's GitHub pages for more options.")),(0,o.kt)("h2",{id:"step-1-connect-to-cardano"},"Step 1: Connect to Cardano"),(0,o.kt)("p",null,"The Hydra Head protocol a connection to the Cardano layer one network to verify\nand post protocol transactions in a trustless way. Hence, the first step is to\nset up a ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node")," on a public testnet. Using Mithril, we can skip\nsynchronizing the whole history and get started quickly."),(0,o.kt)("p",null,"We will be using the ",(0,o.kt)("inlineCode",{parentName:"p"},"mithril-client")," configured to download from\n",(0,o.kt)("inlineCode",{parentName:"p"},"preprod")," network to download the latest blockchain snapshot:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"SNAPSHOT_DIGEST=$(mithril-client snapshot list --json | jq -r '.[0].digest')\nmithril-client snapshot download $SNAPSHOT_DIGEST\n")),(0,o.kt)("p",null,"Then we can run a ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node"),", first downloading some configuration files, with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"curl -O https://book.world.dev.cardano.org/environments/preprod/config.json\ncurl -O https://book.world.dev.cardano.org/environments/preprod/topology.json\ncurl -O https://book.world.dev.cardano.org/environments/preprod/byron-genesis.json\ncurl -O https://book.world.dev.cardano.org/environments/preprod/shelley-genesis.json\ncurl -O https://book.world.dev.cardano.org/environments/preprod/alonzo-genesis.json\ncurl -O https://book.world.dev.cardano.org/environments/preprod/conway-genesis.json\n\ncardano-node run \\\n  --config config.json \\\n  --topology topology.json \\\n  --socket-path ./node.socket \\\n  --database-path db\n")),(0,o.kt)("p",null,"To interact with the ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node")," we will be using the ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-cli"),"\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-cli")," we can now check the synchronization status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli query tip\n")),(0,o.kt)("p",null,"This should show something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "block": 1275938,\n  "epoch": 88,\n  "era": "Babbage",\n  "hash": "7d22ae918f3ffd35e18c5a7859af27dbcbd29fe08f274b76c284c00042044a2e",\n  "slot": 36501000,\n  "slotInEpoch": 126600,\n  "slotsToEpochEnd": 305400,\n  "syncProgress": "100.00"\n}\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Bash auto-completion"),(0,o.kt)("p",null,"If you are using ",(0,o.kt)("inlineCode",{parentName:"p"},"bash"),", you can get auto-completion of ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-cli")," using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"source <(cardano-cli --bash-completion-script cardano-cli)\n"))),(0,o.kt)("p",null,"Detailed steps on bootstrapping a ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node")," using Mithril with more\nexplanations can be found\n",(0,o.kt)("a",{parentName:"p",href:"https://mithril.network/doc/manual/getting-started/bootstrap-cardano-node"},"here")),(0,o.kt)("h2",{id:"step-2-prepare-keys-and-funding"},"Step 2: Prepare keys and funding"),(0,o.kt)("p",null,"As introduced before, the tutorial considers a minimal setup of two participants\nthat together want to open a Hydra head. We will call them ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bob"),"\ngoing forward. Depending on whether you do this tutorial with a friend or alone,\ndecide who is who or execute the commands on your two distinct setups."),(0,o.kt)("p",null,"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-cli")," we first generate Cardano key pairs and addresses to\nidentify the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," and hold funds on the layer one:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p credentials\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/alice-node.vk \\\n  --signing-key-file credentials/alice-node.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/alice-node.vk \\\n  --out-file credentials/alice-node.addr\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/alice-funds.vk \\\n  --signing-key-file credentials/alice-funds.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/alice-funds.vk \\\n  --out-file credentials/alice-funds.addr\n"))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p credentials\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/bob-node.vk \\\n  --signing-key-file credentials/bob-node.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/bob-node.vk \\\n  --out-file credentials/bob-node.addr\n\ncardano-cli address key-gen \\\n  --verification-key-file credentials/bob-funds.vk \\\n  --signing-key-file credentials/bob-funds.sk\n\ncardano-cli address build \\\n  --verification-key-file credentials/bob-funds.vk \\\n  --out-file credentials/bob-funds.addr\n")))),(0,o.kt)("p",null,"Next we need to send some funds to the node and funding keys. If you have a\nwallet on ",(0,o.kt)("inlineCode",{parentName:"p"},"preprod"),", you can send some tADA directly to these addresses shown\nafter executing:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'echo "Send at least 30 tADA to alice-node:"\necho $(cat credentials/alice-node.addr)"\\n"\n\necho "Send any amount of tADA or assets to alice-funds:"\necho $(cat credentials/alice-funds.addr)"\\n"\n'))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'echo "Send at least 30 tADA to bob-node:"\necho $(cat credentials/bob-node.addr)"\\n"\n\necho "Send any amount of tADA or assets to bob-funds:"\necho $(cat credentials/bob-funds.addr)"\\n"\n')))),(0,o.kt)("admonition",{title:"Where to get funds",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In case you have no tADA on ",(0,o.kt)("inlineCode",{parentName:"p"},"preprod"),", you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cardano.org/cardano-testnet/tools/faucet/"},"Testnet Faucet")," to seed your wallet or the addresses above. Note that due to rate limiting, it's better to request a large sums for a single address and then dispatch to other addresses.")),(0,o.kt)("p",null,"You can check the balance of your addresses via:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'echo "# UTxO of alice-node"\ncardano-cli query utxo --address $(cat credentials/alice-node.addr) --out-file /dev/stdout | jq\n\necho "# UTxO of alice-funds"\ncardano-cli query utxo --address $(cat credentials/alice-funds.addr) --out-file /dev/stdout | jq\n'))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'echo "# UTxO of bob-node"\ncardano-cli query utxo --address $(cat credentials/bob-node.addr) --out-file /dev/stdout | jq\n\necho "# UTxO of bob-funds"\ncardano-cli query utxo --address $(cat credentials/bob-funds.addr) --out-file /dev/stdout | jq\n')))),(0,o.kt)("p",null,"Besides the Cardano keys, we now also need to generate Hydra key pairs which\nwill be used on the layer two by the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),". For this, we will use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-tools")," to generate the keys for ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and/or ",(0,o.kt)("inlineCode",{parentName:"p"},"bob")," respectively:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"hydra-tools gen-hydra-key --output-file credentials/alice-hydra\n"))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"hydra-tools gen-hydra-key --output-file credentials/bob-hydra\n")))),(0,o.kt)("p",null,"If you are doing this tutorial with a friend, now is the time to exchange the\nverification (public) keys: ",(0,o.kt)("inlineCode",{parentName:"p"},"{alice,bob}-node.vk")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"{alice,bob}-hydra.vk"),".\nYou can use any authenticated communication channel for this where you can be\nsure your peer cannot be easily impersonated."),(0,o.kt)("p",null,"Besides keys, we also want to communicate each other's connectivity information.\nThat is, an IP address / hostname + port where we will be reachable for our\nlayer two network using ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),". For the purpose of this tutorial we are\nassuming an IP address and port for ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bob")," which works on a single\nmachine, but please replace usages below with your respective addresses:"),(0,o.kt)("p",null,"Alice: ",(0,o.kt)("code",null,"127.0.0.1:5001")),(0,o.kt)("p",null,"Bob: ",(0,o.kt)("code",null,"127.0.0.1:5001")),(0,o.kt)("p",null,"We still need one thing, before we can spin up the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),", that is the\nprotocol parameters that the ledger in our Hydra head will use. We can use the\nsame parameters as on the Cardano layer one, but we tweak them for this tutorial\nsuch that there are no fees! This will fetch the parameters and sets fees +\nprices to zero:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cardano-cli query protocol-parameters \\\n  | jq '.txFeeFixed = 0 |.txFeePerByte = 0 | .executionUnitPrices.priceMemory = 0 | .executionUnitPrices.priceSteps = 0' \\\n  > protocol-parameters.json\n")),(0,o.kt)("p",null,"In summary, the Hydra head participants exchanged and agreed on:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"IP addresses + port on which their ",(0,o.kt)("inlineCode",{parentName:"li"},"hydra-node")," will run."),(0,o.kt)("li",{parentName:"ul"},"A Hydra verification key to identify them in the head."),(0,o.kt)("li",{parentName:"ul"},"A Cardano verification key to identify them on the blockchain."),(0,o.kt)("li",{parentName:"ul"},"The protocol parameters that they want to use in the Hydra head."),(0,o.kt)("li",{parentName:"ul"},"A contestation period for the head closing (we will use the default here).")),(0,o.kt)("h2",{id:"step-3-start-the-hydra-node"},"Step 3: Start the Hydra node"),(0,o.kt)("p",null,"With all these parameters defined, we now pick a version of the Head protocol we\nwant to use. This is defined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node --version")," itself and the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--hydra-scripts-tx-id")," which point to scripts published on-chain."),(0,o.kt)("p",null,"For all ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/hydra/releases"},"released")," versions\nof the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," and common Cardano networks, the scripts do get\npre-published and we can just use them. See the ",(0,o.kt)("a",{parentName:"p",href:"../getting-started/quickstart#reference-scripts"},"user\nmanual")," for more information\nhow to publish scripts yourself."),(0,o.kt)("p",null,"Let's start the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," with all these parameters now:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'hydra-node \\\n  --node-id "alice-node" \\\n  --persistence-dir persistence-alice \\\n  --cardano-signing-key credentials/alice-node.sk \\\n  --hydra-signing-key credentials/alice-hydra.sk \\\n  --hydra-scripts-tx-id e5eb53b913e274e4003692d7302f22355af43f839f7aa73cb5eb53510f564496 \\\n  --ledger-protocol-parameters protocol-parameters.json \\\n  --testnet-magic 1 \\\n  --node-socket node.socket \\\n  --api-port 4001 \\\n  --host 0.0.0.0 \\\n  --port 5001 \\\n  --peer 127.0.0.1:5002 \\\n  --hydra-verification-key credentials/bob-hydra.vk \\\n  --cardano-verification-key credentials/bob-node.vk\n'))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'hydra-node \\\n  --node-id "bob-node" \\\n  --persistence-dir persistence-bob \\\n  --cardano-signing-key credentials/bob-node.sk \\\n  --hydra-signing-key credentials/bob-hydra.sk \\\n  --hydra-scripts-tx-id e5eb53b913e274e4003692d7302f22355af43f839f7aa73cb5eb53510f564496 \\\n  --ledger-protocol-parameters protocol-parameters.json \\\n  --testnet-magic 1 \\\n  --node-socket node.socket \\\n  --api-port 4002 \\\n  --host 0.0.0.0 \\\n  --port 5002 \\\n  --peer 127.0.0.1:5001 \\\n  --hydra-verification-key credentials/alice-hydra.vk \\\n  --cardano-verification-key credentials/alice-node.vk\n')))),(0,o.kt)("p",null,"And we can check whether it is running by opening a Websocket connection to the API port:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"websocat ws://127.0.0.1:4001 | jq\n"))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"websocat ws://127.0.0.1:4002 | jq\n")))),(0,o.kt)("p",null,"This opens a duplex connection and we should see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "peer": "bob-node",\n  "seq": 0,\n  "tag": "PeerConnected",\n  "timestamp": "2023-08-17T18:25:02.903974459Z"\n}\n{\n  "headStatus": "Idle",\n  "hydraNodeVersion": "0.12.0-54db2265c257c755df98773c64754c9854d879e8",\n  "me": {\n    "vkey": "ab159b29b87b498fa060f6045cccf84ecd20cf623f7820ed130ffc849633a120"\n  },\n  "seq": 1,\n  "tag": "Greetings",\n  "timestamp": "2023-08-17T18:32:29.092329511Z"\n}\n')),(0,o.kt)("p",null,"Before continuing, make sure that you see a ",(0,o.kt)("inlineCode",{parentName:"p"},"PeerConnected")," message for each of\nthe configured other ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),". If this is not showing up, double-check\nnetwork configuration and connectivity."),(0,o.kt)("h2",{id:"step-4-open-a-hydra-head"},"Step 4: Open a Hydra head"),(0,o.kt)("p",null,"Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"jq")," enhanced ",(0,o.kt)("inlineCode",{parentName:"p"},"websocat")," session, we can now communicate with the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," through its Websocket API on the terminal. This is a duplex connection and we can just insert commands directly."),(0,o.kt)("p",null,"Send this command to initialize a head through the Websocket connection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Websocket API"',title:'"Websocket','API"':!0},'{ "tag": "Init" }\n')),(0,o.kt)("p",null,"Depending on the network connection, this might take a bit as the node does\nsubmit a transaction on-chain. Eventually, both Hydra nodes and connected\nclients should see ",(0,o.kt)("inlineCode",{parentName:"p"},"HeadIsInitializing")," with a list of parties that need to\ncommit now."),(0,o.kt)("p",null,"Committing funds to the head means that we pick which UTxO we want to have\navailable on the layer two. We use the HTTP API of ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," to commit all\nfunds given to ",(0,o.kt)("inlineCode",{parentName:"p"},"{alice,bob}-funds.vk")," beforehand:"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli query utxo \\\n  --address $(cat credentials/alice-funds.addr) \\\n  --out-file alice-commit-utxo.json\n\ncurl -X POST 127.0.0.1:4001/commit \\\n  --data @alice-commit-utxo.json \\\n  > alice-commit-tx.json\n\ncardano-cli transaction sign \\\n  --tx-file alice-commit-tx.json \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file alice-commit-tx-signed.json\n\ncardano-cli transaction submit --tx-file alice-commit-tx-signed.json\n"))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli query utxo \\\n  --address $(cat credentials/bob-funds.addr) \\\n  --out-file bob-commit-utxo.json\n\ncurl -X POST 127.0.0.1:4002/commit \\\n  --data @bob-commit-utxo.json \\\n  > bob-commit-tx.json\n\ncardano-cli transaction sign \\\n  --tx-file bob-commit-tx.json \\\n  --signing-key-file credentials/bob-funds.sk \\\n  --out-file bob-commit-tx-signed.json\n\ncardano-cli transaction submit --tx-file bob-commit-tx-signed.json\n")))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Alternative: Not commit anything"),(0,o.kt)("p",null,"If you don't want to commit any funds, for example only receive things on the\nlayer two, you can just request an empty commit transaction like this (example\nfor ",(0,o.kt)("inlineCode",{parentName:"p"},"bob"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST 127.0.0.1:4002/commit --data "{}" > bob-commit-tx.json\ncardano-cli transaction submit --tx-file bob-commit-tx.json\n'))),(0,o.kt)("p",null,"This does find all UTxO owned by the funds key, request a commit transaction\ndraft from the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),", sign it with the funds key and submit the\ntransaction to the Cardano layer one."),(0,o.kt)("p",null,"Once this transaction was seen by the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),", you should see a ",(0,o.kt)("inlineCode",{parentName:"p"},"Committed"),"\nmessage on the Websocket connection."),(0,o.kt)("p",null,"When both parties, ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bob"),", have committed, the head will\nautomatically open and you will see a ",(0,o.kt)("inlineCode",{parentName:"p"},"HeadIsOpen")," on the Websocket session.\nThis message also includes the starting balance ",(0,o.kt)("inlineCode",{parentName:"p"},"utxo"),". Notice that the entries\ncorrespond exactly the ones which were committed to the Head (even the Tx hash\nand index are the same). The head is now open and ready to be used!"),(0,o.kt)("h2",{id:"step-5-using-the-hydra-head"},"Step 5: Using the Hydra head"),(0,o.kt)("p",null,"We want to make a basic transaction between ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bob"),". Since Hydra Head\nis an isomorphic protocol, all things that work on the layer one also work in\nthe head. This means that constructing transactions is no different than on\nCardano. This is great since it allows us to use already existing tools like the\n",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-cli")," or frameworks to create transactions!"),(0,o.kt)("p",null,"In this example, we will send ",(0,o.kt)("inlineCode",{parentName:"p"},"10\u20b3")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"bob"),", hence you may need to\nchange the values depending on what you (and your partner) committed to the\nhead."),(0,o.kt)("p",null,"First, we need to select a UTxO to spend. We can do this either by looking at\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"utxo")," field of the last ",(0,o.kt)("inlineCode",{parentName:"p"},"HeadIsOpen")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"SnapshotConfirmed")," message, or\nquery the API for the current UTxO set through the websocket session:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Websocket API"',title:'"Websocket','API"':!0},'{ "tag": "GetUTxO" }\n')),(0,o.kt)("p",null,"From the response, we would need to select a UTxO that is owned by ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," to\nspend. We can do that also via the ",(0,o.kt)("inlineCode",{parentName:"p"},"snapshotUtxo")," field in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Greetings"),"\nmessage and using this ",(0,o.kt)("inlineCode",{parentName:"p"},"websocat")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jq")," invocation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'websocat -U "ws://0.0.0.0:4001?history=no" \\\n  | jq "select(.tag == \\"Greetings\\") \\\n    | .snapshotUtxo \\\n    | with_entries(select(.value.address == \\"$(cat credentials/alice-funds.addr)\\"))" \\\n  > utxo.json\n')),(0,o.kt)("p",null,"Then, just like on the Cardano layer one, we can construct a transaction via the\n",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-cli")," that spends this UTxO and send it to an address. If you have not\nyet, enquire the address of your partner to send something to (here\n",(0,o.kt)("inlineCode",{parentName:"p"},"credentials/bob-funds.addr")," which ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," would not have automatically):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"LOVELACE=1000000\ncardano-cli transaction build-raw \\\n  --tx-in $(jq -r 'to_entries[0].key' < utxo.json) \\\n  --tx-out $(cat credentials/bob-funds.addr)+${LOVELACE} \\\n  --tx-out $(cat credentials/alice-funds.addr)+$(jq \"to_entries[0].value.value.lovelace - ${LOVELACE}\" < utxo.json) \\\n  --fee 0 \\\n  --out-file tx.json\n")),(0,o.kt)("p",null,"Note that we need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"build-raw")," version, since the client cannot (yet?)\nindex the Hydra head directly and would not find the UTxO to spend. This means\nwe need to also create a change output with the right amount. Also, because we\nhave set the protocol parameters of the head to have zero fees, we can use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--fee 0")," option."),(0,o.kt)("p",null,"Before submission, we need to sign the transaction to authorize spending ",(0,o.kt)("inlineCode",{parentName:"p"},"alice"),"'s funds:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cardano-cli transaction sign \\\n  --tx-body-file tx.json \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file tx-signed.json\n")),(0,o.kt)("p",null,"To submit the transaction we can use our websocket session again. This command\nwill print the ",(0,o.kt)("inlineCode",{parentName:"p"},"NewTx")," command to copy paste into an already open websocket\nconnection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cat tx-signed.json | jq -c '{tag: \"NewTx\", transaction: .cborHex}'\n")),(0,o.kt)("p",null,"The transation will be validated by both ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node"),"s and either result in a\n",(0,o.kt)("inlineCode",{parentName:"p"},"TxInvalid")," message with a reason, or a ",(0,o.kt)("inlineCode",{parentName:"p"},"TxValid")," message and a\n",(0,o.kt)("inlineCode",{parentName:"p"},"SnapshotConfirmed")," with the new UTxO available in the head shortly after."),(0,o.kt)("p",null,"\ud83c\udf89 Congratulations, you just processed your first Cardano transaction off-chain\nin a Hydra head!"),(0,o.kt)("p",null,"At this stage you can continue experimenting with constructing & submitting\ntransactions to the head as you wish. Proceed in the tutorial once you're done\nand want to realize the exchanged funds from the Hydra head back to the Cardano\nlayer one."),(0,o.kt)("h2",{id:"step-6-closing-the-hydra-head"},"Step 6: Closing the Hydra head"),(0,o.kt)("p",null,"Each participant of the head can close it at any point in time. To do this, we\ncan use the websocket API and submit this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Websocket API"',title:'"Websocket','API"':!0},'{ "tag": "Close" }\n')),(0,o.kt)("p",null,"This will have the ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," submit a protocol transaction to the Cardano\nnetwork with the last known snapshot. A smart contract on the layer one will\ncheck the snapshot signatures and confirm the head closed. When this close\ntransaction is observed, the websocket API sends a ",(0,o.kt)("inlineCode",{parentName:"p"},"HeadIsClosed")," message (this\ncan also happen if any other ",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," closes the head)."),(0,o.kt)("p",null,"Included in the message will be a ",(0,o.kt)("inlineCode",{parentName:"p"},"contestationDeadline")," which gets set using\nthe configurable ",(0,o.kt)("inlineCode",{parentName:"p"},"--contestation-period"),". Until this deadline, the closing\nsnapshot can be contested with a more recent, multi-signed snapshot. Your\n",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," would contest automatically for you if the closed snapshot is not\nthe last known one."),(0,o.kt)("p",null,"We need to wait now until the deadline has passed, which will be notified by the\n",(0,o.kt)("inlineCode",{parentName:"p"},"hydra-node")," through the websocket API with a ",(0,o.kt)("inlineCode",{parentName:"p"},"ReadyToFanout")," message."),(0,o.kt)("p",null,"At this point any head member can issue distribution of funds on the layer one.\nYou can do this through the websocket API one last time:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Websocket API"',title:'"Websocket','API"':!0},'{ "tag": "Fanout" }\n')),(0,o.kt)("p",null,"This will again submit a transactin to the layer one and once successful is\nindicated by a ",(0,o.kt)("inlineCode",{parentName:"p"},"HeadIsFinalized")," message which includes the distributed ",(0,o.kt)("inlineCode",{parentName:"p"},"utxo"),"."),(0,o.kt)("p",null,"To confirm, you can query the funds of both, ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bob"),", on the layer\none:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'echo "# UTxO of alice"\ncardano-cli query utxo --address $(cat credentials/alice-funds.addr) --out-file /dev/stdout | jq\n\necho "# UTxO of bob"\ncardano-cli query utxo --address $(cat credentials/bob-funds.addr) --out-file /dev/stdout | jq\n')),(0,o.kt)("p",null,"That's it. That's the full life-cycle of a Hydra head."),(0,o.kt)("h2",{id:"bonus-be-a-good-citizen"},"Bonus: Be a good citizen"),(0,o.kt)("p",null,"As we have taken our funds from the testnet faucet and we do not need them\nanymore, we can return all the remaining tADA of ",(0,o.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"bob")," back to the\nfaucet (before we throw away the keys):"),(0,o.kt)(r.Z,{queryString:"role",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"alice",label:"Alice",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cardano-cli query utxo \\\n  --address $(cat credentials/alice-node.addr) \\\n  --address $(cat credentials/alice-funds.addr) \\\n  --out-file alice-return-utxo.json\n\ncardano-cli transaction build \\\n  $(cat alice-return-utxo.json | jq -j \'to_entries[].key | "--tx-in ", ., " "\') \\\n  --change-address addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3 \\\n  --out-file alice-return-tx.json\n\ncardano-cli transaction sign \\\n  --tx-file alice-return-tx.json \\\n  --signing-key-file credentials/alice-node.sk \\\n  --signing-key-file credentials/alice-funds.sk \\\n  --out-file alice-return-tx-signed.json\n\ncardano-cli transaction submit --tx-file alice-return-tx-signed.json\n'))),(0,o.kt)(i.Z,{value:"bob",label:"Bob",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cardano-cli query utxo \\\n  --address $(cat credentials/bob-node.addr) \\\n  --address $(cat credentials/bob-funds.addr) \\\n  --out-file bob-return-utxo.json\n\ncardano-cli transaction build \\\n  $(cat bob-return-utxo.json | jq -j \'to_entries[].key | "--tx-in ", ., " "\') \\\n  --change-address addr_test1qqr585tvlc7ylnqvz8pyqwauzrdu0mxag3m7q56grgmgu7sxu2hyfhlkwuxupa9d5085eunq2qywy7hvmvej456flknswgndm3 \\\n  --out-file bob-return-tx.json\n\ncardano-cli transaction sign \\\n  --tx-file bob-return-tx.json \\\n  --signing-key-file credentials/bob-node.sk \\\n  --signing-key-file credentials/bob-funds.sk \\\n  --out-file bob-return-tx-signed.json\n\ncardano-cli transaction submit --tx-file bob-return-tx-signed.json\n')))))}m.isMDXComponent=!0},11853:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/basic-hydra-head-31e4fded6123899b955e2ec45ad63e78.jpg"}}]);