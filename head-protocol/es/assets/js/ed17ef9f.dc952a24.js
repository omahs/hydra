"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[2905],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>m});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var h=a.createContext({}),c=function(t){var e=a.useContext(h),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},l=function(t){var e=c(t.components);return a.createElement(h.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,h=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),p=c(n),u=o,m=p["".concat(h,".").concat(u)]||p[u]||d[u]||i;return n?a.createElement(m,r(r({ref:e},l),{},{components:n})):a.createElement(m,r({ref:e},l))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var h in e)hasOwnProperty.call(e,h)&&(s[h]=e[h]);s.originalType=t,s[p]="string"==typeof t?t:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},76054:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:2},r="Protocol outline",s={unversionedId:"protocol-outline",id:"protocol-outline",title:"Protocol outline",description:"In this section, we will discuss a high-level overview of the different stages of the Hydra protocol and its life cycle. We assume that everything goes accordingly, by which we mean that during all steps of the protocol, all parties are online and do not have a dispute. The cycle can be defined in the following four stages.",source:"@site/core-concepts/protocol-outline.md",sourceDirName:".",slug:"/protocol-outline",permalink:"/head-protocol/es/core-concepts/protocol-outline",draft:!1,editUrl:"https://github.com/input-output-hk/hydra/tree/master/docs/core-concepts/protocol-outline.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Overview",permalink:"/head-protocol/es/core-concepts/"},next:{title:"Scalability",permalink:"/head-protocol/es/core-concepts/scalability"}},h={},c=[{value:"Initializing",id:"initializing",level:2},{value:"Opening",id:"opening",level:2},{value:"Closing",id:"closing",level:2},{value:"Finalizing",id:"finalizing",level:2}],l={toc:c},p="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,a.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"protocol-outline"},"Protocol outline"),(0,o.kt)("p",null,"In this section, we will discuss a high-level overview of the different stages of the Hydra protocol and its life cycle. We assume that everything goes accordingly, by which we mean that during all steps of the protocol, all parties are online and do not have a dispute. The cycle can be defined in the following four stages."),(0,o.kt)("h2",{id:"initializing"},"Initializing"),(0,o.kt)("p",null,"In this stage, the foundation of the protocol is laid. It all starts with a group of parties that together want to run an instance of a hydra head. A few things need to be determined before they can start a secure execution of the protocol.\nFirstly, the parties need to communicate some basic things with each other. They each share the following things"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An IP address + port of their machine that will run the Hydra node."),(0,o.kt)("li",{parentName:"ul"},"A Hydra verification key to identify them in the head."),(0,o.kt)("li",{parentName:"ul"},"A Cardano verification key to identify them on the blockchain."),(0,o.kt)("li",{parentName:"ul"},"Agree on the protocol parameters that they want to use in the Hydra head.")),(0,o.kt)("p",null,"The IP address and the port is needed so that other parties know how to establish a secure pairwise communication channel with each other. We leave out here what a secure connection entails. The two keys are needed to ensure that parties are cryptographically identified on the blockchain and in the Hydra head. And lastly, all participants need to reach an agreement on the used protocol parameters that will be used inside the head. More details will follow on all these four things."),(0,o.kt)("p",null,"Then, once each of the parties has the above information about the other parties, they each can start their Hydra node. This will establish a communication channel for the rest of the protocol execution."),(0,o.kt)("p",null,"Via this communication channel, one party can start the protocol by posting an ",(0,o.kt)("strong",{parentName:"p"},"initialization")," transaction on the blockchain. This transaction is made to a smart contract that keeps track of the identification keys describes above of the parties. This action is then observed by the other parties on the blockchain, they confirm this transaction and use this contract to join the protocol. They join by ",(0,o.kt)("strong",{parentName:"p"},"committing")," funds that they have to this contract. Here, the contract keeps track of what funds were put in by which party by linking the funds to their verification key. This in case that the protocol is aborted before the head is opened, so that each can reclaim their funds."),(0,o.kt)("h2",{id:"opening"},"Opening"),(0,o.kt)("p",null,"In this stage, the core of the protocol, which gives us the scalability properties, is run. After all parties have committed to the contract, any party can post a transaction on the blockchain to open the head. To do so they ",(0,o.kt)("strong",{parentName:"p"},"collect")," all the funds committed and combine them in the contract, the head is now open."),(0,o.kt)("p",null,"From this point, the committed funds by each party are represented in the hydra head as the initial snapshot. Remember that Hydra is an isomorphic state channel, this means it behaves and looks similar to the layer one blockchain. That is why these snapshots keep track of the state using the EUTxO model. More explicit, each snapshot consists of at least these things"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a number to indicate its order regarding other snapshots."),(0,o.kt)("li",{parentName:"ul"},"a commitment to a collection of UTxO's that represent the state of the head."),(0,o.kt)("li",{parentName:"ul"},"The signatures of all parties.")),(0,o.kt)("p",null,"With each new transaction, the collection of UTxO's changes and a new snapshot is made. The time that it takes to perform this snapshot is dependent on the size of the UTxO collection, the number of parties in the head and their communication time. But, note that this time is certainly less than the 20 seconds per block. Also, note that the entire UTxO's collection is stored in the snapshot. Since the total size of the head might get gigantic as it is used, the commitment to a particular collection is stored instead. This is done via Merkle tree's, a computer science data structure that allows you to prove that a UTxO is part of the commitment without storing it in full."),(0,o.kt)("h2",{id:"closing"},"Closing"),(0,o.kt)("p",null,"In this stage, the parties are done with their transactions in the head and want to close it. During the previous stage, they all gathered multiple ordered snapshots, each index by an increasing number. With these snapshots, any party can close the head at any time, they do this by making a transaction on the layer one blockchain that notifies the contract that they want to close the head. More detailed, they notify the contract of their last perceived known snapshot.\nThe other parties see this transaction happen on the blockchain and check with the snapshot number that this snapshot is also their last perceived snapshot. If not, they have some time to ",(0,o.kt)("strong",{parentName:"p"},"contest")," to that snapshot by providing a newer snapshot to the contract. The time they have is given as a parameter in the initialization phase."),(0,o.kt)("p",null,"Notice that no party can cheat and can publish an old snapshot, as any of the other parties can contest to that intermediate snapshot."),(0,o.kt)("h2",{id:"finalizing"},"Finalizing"),(0,o.kt)("p",null,"In this stage, the head is closed, but the initial funds are still at the contract. To distribute these funds, the contract needs to ",(0,o.kt)("strong",{parentName:"p"},"fanout")," the collected UTxOs from the commitment phase given the latest snapshot. From the latest snapshot, the commitment to a collection of UTxO's can be extracted. Each party can use this Merkelised data structure to prove that an UTxO that they owned in the head is part of it of the commitment. The contract then allows parties to extract UTxO's from the contract to the associated address that corresponds to UTxO as in the Merkle Tree."),(0,o.kt)("p",null,"It is important to note here that value cannot be created at this fanout stage with respect to the commitment phase. Though native assets can be used and committed in a head (it's an isomorphic state channel), the creation of new ones in a head cannot be fanned out. This is because the mainchain has no scope on any transactions in a head, so in particular, the layer one is oblivious to any (in)correct execution of a minting policy in the head. So in conclusion, the value that enters a head in the commitment phase equals the value extracted in the fanout phase. As a concluding overview, the four stages above give the following diagram."))}d.isMDXComponent=!0}}]);