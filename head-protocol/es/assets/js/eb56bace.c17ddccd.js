"use strict";(self.webpackChunkhydra_head_protocol_docs=self.webpackChunkhydra_head_protocol_docs||[]).push([[8335],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=o(a),k=l,c=u["".concat(p,".").concat(k)]||u[k]||m[k]||i;return a?n.createElement(c,r(r({ref:t},d),{},{components:a})):n.createElement(c,r({ref:t},d))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:l,r[1]=s;for(var o=2;o<i;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},22834:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var n=a(87462),l=(a(67294),a(3905));const i={},r="Test Results for hydra-node",s={unversionedId:"tests/hydra-node/hspec-results",id:"tests/hydra-node/hspec-results",title:"Test Results for hydra-node",description:"Hydra.Persistence",source:"@site/benchmarks/tests/hydra-node/hspec-results.md",sourceDirName:"tests/hydra-node",slug:"/tests/hydra-node/hspec-results",permalink:"/head-protocol/es/benchmarks/tests/hydra-node/hspec-results",draft:!1,editUrl:"https://github.com/input-output-hk/hydra/tree/master/docs/benchmarks/tests/hydra-node/hspec-results.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Test Results for hydra-cluster",permalink:"/head-protocol/es/benchmarks/tests/hydra-cluster/hspec-results"},next:{title:"Test Results for hydra-plutus",permalink:"/head-protocol/es/benchmarks/tests/hydra-plutus/hspec-results"}},p={},o=[{value:"Hydra.Persistence",id:"hydrapersistence",level:2},{value:"PersistenceIncremental",id:"persistenceincremental",level:3},{value:"Persistence",id:"persistence",level:3},{value:"Hydra.Party",id:"hydraparty",level:2},{value:"Ord",id:"ord",level:3},{value:"JSON encoding of Party",id:"json-encoding-of-party",level:3},{value:"Hydra.Options",id:"hydraoptions",level:2},{value:"Hydra Node RunOptions",id:"hydra-node-runoptions",level:3},{value:"JSON encoding of RunOptions",id:"json-encoding-of-runoptions",level:4},{value:"gen-hydra-keys sub-command",id:"gen-hydra-keys-sub-command",level:4},{value:"publish-scripts sub-command",id:"publish-scripts-sub-command",level:4},{value:"Hydra.Node.EventQueue",id:"hydranodeeventqueue",level:2},{value:"Hydra.Node",id:"hydranode",level:2},{value:"Hydra.Network.Heartbeat",id:"hydranetworkheartbeat",level:2},{value:"Hydra.Network.Authenticate",id:"hydranetworkauthenticate",level:2},{value:"Serialization",id:"serialization",level:3},{value:"JSON encoding of AuthLog",id:"json-encoding-of-authlog",level:4},{value:"Hydra.Network",id:"hydranetwork",level:2},{value:"Serialisation",id:"serialisation",level:3},{value:"JSON encoding of (Message SimpleTx)",id:"json-encoding-of-message-simpletx",level:4},{value:"Ouroboros Network",id:"ouroboros-network",level:3},{value:"Hydra.Model",id:"hydramodel",level:2},{value:"Hydra.Logging.Monitoring",id:"hydraloggingmonitoring",level:2},{value:"Hydra.Logging",id:"hydralogging",level:2},{value:"Hydra.Ledger.Simple",id:"hydraledgersimple",level:2},{value:"Hydra.Ledger.Cardano",id:"hydraledgercardano",level:2},{value:"Evaluate helpers",id:"evaluate-helpers",level:3},{value:"Generators",id:"generators",level:3},{value:"genValue",id:"genvalue",level:4},{value:"genTxOut",id:"gentxout",level:4},{value:"applyTransactions",id:"applytransactions",level:3},{value:"Tx",id:"tx",level:3},{value:"JSON encoding of (Tx BabbageEra)",id:"json-encoding-of-tx-babbageera",level:4},{value:"UTxO",id:"utxo",level:3},{value:"JSON encoding of (UTxO&#39; (TxOut CtxUTxO BabbageEra))",id:"json-encoding-of-utxo-txout-ctxutxo-babbageera",level:4},{value:"JSON encoding of AssetName",id:"json-encoding-of-assetname",level:3},{value:"Hydra.HeadLogicSnapshot",id:"hydraheadlogicsnapshot",level:2},{value:"On AckSn",id:"on-acksn",level:3},{value:"On ReqTx",id:"on-reqtx",level:3},{value:"Generic Snapshot property",id:"generic-snapshot-property",level:3},{value:"Hydra.HeadLogic",id:"hydraheadlogic",level:2},{value:"Coordinated Head Protocol using real Tx",id:"coordinated-head-protocol-using-real-tx",level:3},{value:"Coordinated Head Protocol",id:"coordinated-head-protocol",level:3},{value:"Tracks Transaction Ids",id:"tracks-transaction-ids",level:4},{value:"Types",id:"types",level:3},{value:"JSON encoding of (HeadState SimpleTx)",id:"json-encoding-of-headstate-simpletx",level:4},{value:"JSON encoding of (Event SimpleTx)",id:"json-encoding-of-event-simpletx",level:4},{value:"Hydra.FireForget",id:"hydrafireforget",level:2},{value:"Hydra.Crypto",id:"hydracrypto",level:2},{value:"MultiSignature",id:"multisignature",level:3},{value:"Signature",id:"signature",level:3},{value:"VerificationKey",id:"verificationkey",level:3},{value:"JSON encoding of (VerificationKey HydraKey)",id:"json-encoding-of-verificationkey-hydrakey",level:4},{value:"SigningKey",id:"signingkey",level:3},{value:"Hydra.Chain.Direct.Wallet",id:"hydrachaindirectwallet",level:2},{value:"newTinyWallet",id:"newtinywallet",level:3},{value:"coverFee",id:"coverfee",level:3},{value:"applyTxs",id:"applytxs",level:3},{value:"genTxsSpending / genUTxO",id:"gentxsspending--genutxo",level:3},{value:"Hydra.Chain.Direct.Tx",id:"hydrachaindirecttx",level:2},{value:"collectComTx",id:"collectcomtx",level:3},{value:"Hydra.Chain.Direct.TimeHandle",id:"hydrachaindirecttimehandle",level:2},{value:"Hydra.Chain.Direct.State",id:"hydrachaindirectstate",level:2},{value:"acceptance",id:"acceptance",level:3},{value:"fanout",id:"fanout",level:3},{value:"contest",id:"contest",level:3},{value:"close",id:"close",level:3},{value:"collectCom",id:"collectcom",level:3},{value:"abort",id:"abort",level:3},{value:"commit",id:"commit",level:3},{value:"init",id:"init",level:3},{value:"observeTx",id:"observetx",level:3},{value:"Plutus.PubKeyHash",id:"plutuspubkeyhash",level:3},{value:"JSON encoding of PubKeyHash",id:"json-encoding-of-pubkeyhash",level:4},{value:"ChainState",id:"chainstate",level:3},{value:"JSON encoding of ChainState",id:"json-encoding-of-chainstate",level:4},{value:"Hydra.Chain.Direct.ScriptRegistry",id:"hydrachaindirectscriptregistry",level:2},{value:"Hydra.Chain.Direct.Handlers",id:"hydrachaindirecthandlers",level:2},{value:"LocalChainState",id:"localchainstate",level:3},{value:"chainSyncHanlder",id:"chainsynchanlder",level:3},{value:"Hydra.Chain.Direct.Contract",id:"hydrachaindirectcontract",level:2},{value:"Fanout",id:"fanout-1",level:3},{value:"Contest",id:"contest-1",level:3},{value:"CloseInitial",id:"closeinitial",level:3},{value:"Close",id:"close-1",level:3},{value:"CollectCom",id:"collectcom-1",level:3},{value:"Commit",id:"commit-1",level:3},{value:"Abort",id:"abort-1",level:3},{value:"Init",id:"init-1",level:3},{value:"Serializing commits",id:"serializing-commits",level:3},{value:"TxOut hashing",id:"txout-hashing",level:3},{value:"Signature validator",id:"signature-validator",level:3},{value:"Hydra.Behavior",id:"hydrabehavior",level:2},{value:"rolling back &amp; forward does not make the node crash",id:"rolling-back--forward-does-not-make-the-node-crash",level:3},{value:"Hydra Node Logging",id:"hydra-node-logging",level:3},{value:"JSON encoding of (HydraNodeLog SimpleTx)",id:"json-encoding-of-hydranodelog-simpletx",level:4},{value:"Two participant Head",id:"two-participant-head",level:3},{value:"in an open head",id:"in-an-open-head",level:4},{value:"Single participant Head",id:"single-participant-head",level:3},{value:"Sanity tests of test suite",id:"sanity-tests-of-test-suite",level:3},{value:"Hydra.API.ServerOutput",id:"hydraapiserveroutput",level:2},{value:"JSON encoding of (ReasonablySized (TimedServerOutput (Tx BabbageEra)))",id:"json-encoding-of-reasonablysized-timedserveroutput-tx-babbageera",level:3},{value:"JSON encoding of (ReasonablySized (ServerOutput (Tx BabbageEra)))",id:"json-encoding-of-reasonablysized-serveroutput-tx-babbageera",level:3},{value:"JSON encoding of (ReasonablySized (ServerOutput SimpleTx))",id:"json-encoding-of-reasonablysized-serveroutput-simpletx",level:3},{value:"Hydra.API.Server",id:"hydraapiserver",level:2},{value:"ServerSpec",id:"serverspec",level:3},{value:"Hydra.API.HTTPServer",id:"hydraapihttpserver",level:2},{value:"JSON encoding of (ReasonablySized TransactionSubmitted)",id:"json-encoding-of-reasonablysized-transactionsubmitted",level:3},{value:"JSON encoding of (ReasonablySized SubmitTxRequest)",id:"json-encoding-of-reasonablysized-submittxrequest",level:3},{value:"JSON encoding of (ReasonablySized DraftCommitTxRequest)",id:"json-encoding-of-reasonablysized-draftcommittxrequest",level:3},{value:"JSON encoding of (ReasonablySized DraftCommitTxResponse)",id:"json-encoding-of-reasonablysized-draftcommittxresponse",level:3},{value:"API should respond correctly",id:"api-should-respond-correctly",level:3},{value:"Hydra.API.ClientInput",id:"hydraapiclientinput",level:2},{value:"FromJSON (ValidatedTx era)",id:"fromjson-validatedtx-era",level:3},{value:"JSON encoding of (ReasonablySized (ClientInput (Tx BabbageEra)))",id:"json-encoding-of-reasonablysized-clientinput-tx-babbageera",level:3},{value:"JSON encoding of (ReasonablySized (ClientInput SimpleTx))",id:"json-encoding-of-reasonablysized-clientinput-simpletx",level:3}],d={toc:o},u="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"test-results-for-hydra-node"},"Test Results for hydra-node"),(0,l.kt)("h2",{id:"hydrapersistence"},"Hydra.Persistence"),(0,l.kt)("h3",{id:"persistenceincremental"},"PersistenceIncremental"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle empty files")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is consistent after multiple append calls in presence of new-lines"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests:\n72.0% some item contains a new line\n 5.5% no items stored\n"))))),(0,l.kt)("h3",{id:"persistence"},"Persistence"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can handle empty files")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is consistent after save/load roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydraparty"},"Hydra.Party"),(0,l.kt)("h3",{id:"ord"},"Ord"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is transitive"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 539 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is reflexive"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is antisymmetric"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"implements Eq and Ord correspondingly"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"json-encoding-of-party"},"JSON encoding of Party"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Party.json"))),(0,l.kt)("h2",{id:"hydraoptions"},"Hydra.Options"),(0,l.kt)("h3",{id:"hydra-node-runoptions"},"Hydra Node RunOptions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validateRunOptions: using more than 4 parties should error out")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validateRunOptions: loaded cardano keys needs to match with the hydra keys length")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses with default node-id set")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --host option given valid IPv4 and IPv6 addresses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --port option given valid port number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --peer ",(0,l.kt)("inlineCode",{parentName:"p"},"<host>:<port>")," option")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does parse --peer given ipv6 addresses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --monitoring-port option given valid port number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"flag --version returns version with base version from cabal")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --hydra-verification-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --hydra-signing-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --testned-magic option as a number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --mainnet option")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --contestation-period option as a number of seconds")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --mainnet flag")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --node-socket as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --cardano-signing-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --cardano-verification-key option as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --ledger-protocol-parameters-file as a filepath")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --start-chain-from as a pair of slot number and block header hash")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --start-chain-from 0 as starting from genesis")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses --hydra-scripts-tx-id as a tx id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"json-encoding-of-runoptions"},"JSON encoding of RunOptions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/RunOptions.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roundtrip parsing & printing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"gen-hydra-keys-sub-command"},"gen-hydra-keys sub-command"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"should be able to parse gen-hydra-keys sub-command"),(0,l.kt)("li",{parentName:"ul"},"should parse gen-hydra-keys without the output-file flag using default file name")),(0,l.kt)("h4",{id:"publish-scripts-sub-command"},"publish-scripts sub-command"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"does not parse without any options"),(0,l.kt)("li",{parentName:"ul"},"does not parse with some missing option (1)"),(0,l.kt)("li",{parentName:"ul"},"does not parse with some missing option (2)"),(0,l.kt)("li",{parentName:"ul"},"does not parse with some missing option (3)"),(0,l.kt)("li",{parentName:"ul"},"should parse using testnet and all options"),(0,l.kt)("li",{parentName:"ul"},"should parse using mainnet and all options")),(0,l.kt)("h2",{id:"hydranodeeventqueue"},"Hydra.Node.EventQueue"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"adds sequential id to all events enqueued"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydranode"},"Hydra.Node"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"emits a single ReqSn and AckSn as leader, even after multiple ReqTxs"),(0,l.kt)("li",{parentName:"ul"},"rotates snapshot leaders"),(0,l.kt)("li",{parentName:"ul"},"processes out-of-order AckSn"),(0,l.kt)("li",{parentName:"ul"},"notifies client when postTx throws PostTxError"),(0,l.kt)("li",{parentName:"ul"},"signs snapshot even if it has seen conflicting transactions"),(0,l.kt)("li",{parentName:"ul"},"can continue after restart via persisted state")),(0,l.kt)("h2",{id:"hydranetworkheartbeat"},"Hydra.Network.Heartbeat"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"sends a heartbeat message with local host after 500 ms"),(0,l.kt)("li",{parentName:"ul"},"sends Connected when Ping received from other peer"),(0,l.kt)("li",{parentName:"ul"},"sends Connected when any message received from other party"),(0,l.kt)("li",{parentName:"ul"},"do not send Connected on subsequent messages from already Connected party"),(0,l.kt)("li",{parentName:"ul"},"sends Disconnected given no messages has been received from known party within twice heartbeat delay"),(0,l.kt)("li",{parentName:"ul"},"stop sending heartbeat message given action sends a message"),(0,l.kt)("li",{parentName:"ul"},"restart sending heartbeat messages given last message sent is older than heartbeat delay")),(0,l.kt)("h2",{id:"hydranetworkauthenticate"},"Hydra.Network.Authenticate"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"pass the authenticated messages around"),(0,l.kt)("li",{parentName:"ul"},"drop message coming from unknown party"),(0,l.kt)("li",{parentName:"ul"},"drop message coming from party with wrong signature"),(0,l.kt)("li",{parentName:"ul"},"authenticate the message to broadcast"),(0,l.kt)("li",{parentName:"ul"},"logs dropped messages")),(0,l.kt)("h3",{id:"serialization"},"Serialization"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can roundtrip CBOR encoding/decoding of Signed Hydra Message"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"json-encoding-of-authlog"},"JSON encoding of AuthLog"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/AuthLog.json"))),(0,l.kt)("h2",{id:"hydranetwork"},"Hydra.Network"),(0,l.kt)("h3",{id:"serialisation"},"Serialisation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can roundtrip CBOR encoding/decoding of Hydra Message"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"json-encoding-of-message-simpletx"},"JSON encoding of (Message SimpleTx)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Message SimpleTx.json"))),(0,l.kt)("h3",{id:"ouroboros-network"},"Ouroboros Network"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"broadcasts messages to single connected peer"),(0,l.kt)("li",{parentName:"ul"},"broadcasts messages between 3 connected peers")),(0,l.kt)("h2",{id:"hydramodel"},"Hydra.Model"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"model should not generate 0 Ada UTxO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 10000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"model generates consistent traces"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 10000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"implementation respects model"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nActions (1291 in total):\n67.00% NewTx\n15.26% Commit\n 7.44% Seed\n 6.97% Init\n 3.33% Abort\n\nTransitions (1291 in total):\n67.00% Open -> Open\n12.78% Initial -> Initial\n 7.44% Start -> Idle\n 6.97% Idle -> Initial\n 3.33% Initial -> Final\n 2.48% Initial -> Open\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"check conflict-free liveness"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nActions (1408 in total):\n59.73% NewTx\n13.78% Commit\n 7.10% StopTheWorld\n 6.46% Seed\n 5.82% Init\n 2.56% Abort\n 2.27% ObserveConfirmedTx\n 2.27% Wait\n\nTransitions (1408 in total):\n66.55% Open -> Open\n12.50% Initial -> Initial\n 6.46% Start -> Idle\n 5.82% Idle -> Initial\n 2.56% Final -> Final\n 2.56% Initial -> Final\n 2.27% Initial -> Open\n 0.64% Idle -> Idle\n 0.64% Start -> Start\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"check head opens if all participants commit"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nActions (800 in total):\n50.0% Commit\n12.5% Init\n12.5% ObserveHeadIsOpen\n12.5% Seed\n12.5% Wait\n\nTransitions (800 in total):\n37.5% Initial -> Initial\n25.0% Open -> Open\n12.5% Idle -> Initial\n12.5% Initial -> Open\n12.5% Start -> Idle\n"))))),(0,l.kt)("h2",{id:"hydraloggingmonitoring"},"Hydra.Logging.Monitoring"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"provides prometheus metrics from traces")),(0,l.kt)("h2",{id:"hydralogging"},"Hydra.Logging"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"dumps logs to stdout in JSON with timestamp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"HydraLog"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,l.kt)("h2",{id:"hydraledgersimple"},"Hydra.Ledger.Simple"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates only correctly built transactions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydraledgercardano"},"Hydra.Ledger.Cardano"),(0,l.kt)("h3",{id:"evaluate-helpers"},"Evaluate helpers"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"slotNoFromUTCTime . slotNoToUTCTime === id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"generators"},"Generators"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @TxIn is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @TxId is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @(VerificationKey PaymentKey) is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @(Hash PaymentKey) is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genUTxOAlonzo does not generate collapsing values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genUTxOAdaOnlyOfSize does not generate collapsing values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genUTxOFor is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"genOneUTxOFor is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n"))))),(0,l.kt)("h4",{id:"genvalue"},"genValue"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces realistic values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h4",{id:"gentxout"},"genTxOut"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does generate good values"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n65% has datum\n59% is Script output\n58% has multiple assets \n42% has only ADA\n41% is VK output\n"))))),(0,l.kt)("h3",{id:"applytransactions"},"applyTransactions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works with valid transaction"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"works with valid transaction deserialised from JSON"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"tx"},"Tx"),(0,l.kt)("h4",{id:"json-encoding-of-tx-babbageera"},"JSON encoding of (Tx BabbageEra)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Tx BabbageEra.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Same TxId before/after JSON encoding"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Roundtrip to and from Ledger"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Roundtrip CBOR encoding"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JSON encoding of Tx according to schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses a specific Tx"))),(0,l.kt)("h3",{id:"utxo"},"UTxO"),(0,l.kt)("h4",{id:"json-encoding-of-utxo-txout-ctxutxo-babbageera"},"JSON encoding of (UTxO' (TxOut CtxUTxO BabbageEra))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/UTxO' (TxOut CtxUTxO BabbageEra).json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"JSON encoding of UTxO according to schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"parses a specific UTxO"))),(0,l.kt)("h3",{id:"json-encoding-of-assetname"},"JSON encoding of AssetName"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/AssetName.json"))),(0,l.kt)("h2",{id:"hydraheadlogicsnapshot"},"Hydra.HeadLogicSnapshot"),(0,l.kt)("h3",{id:"on-acksn"},"On AckSn"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"sends ReqSn  when leader and there are seen transactions"),(0,l.kt)("li",{parentName:"ul"},"does NOT send ReqSn when we are the leader but there are NO seen transactions"),(0,l.kt)("li",{parentName:"ul"},"does NOT send ReqSn when we are NOT the leader but there are seen transactions"),(0,l.kt)("li",{parentName:"ul"},"updates seenSnapshot state when sending ReqSn")),(0,l.kt)("h3",{id:"on-reqtx"},"On ReqTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"always emit ReqSn given head has 1 member"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends ReqSn when leader and no snapshot in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does NOT send ReqSn when we are NOT the leader even if no snapshot in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does NOT send ReqSn when we are the leader but snapshot in flight")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"updates seenSnapshot state when sending ReqSn"))),(0,l.kt)("h3",{id:"generic-snapshot-property"},"Generic Snapshot property"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"there's always a leader for every snapshot number"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 21 discarded.\n"))))),(0,l.kt)("h2",{id:"hydraheadlogic"},"Hydra.HeadLogic"),(0,l.kt)("h3",{id:"coordinated-head-protocol-using-real-tx"},"Coordinated Head Protocol using real Tx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"any tx with expiring upper validity range gets pruned"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"coordinated-head-protocol"},"Coordinated Head Protocol"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"reports if a requested tx is expired"),(0,l.kt)("li",{parentName:"ul"},"waits if a requested tx is not (yet) applicable"),(0,l.kt)("li",{parentName:"ul"},"confirms snapshot given it receives AckSn from all parties")),(0,l.kt)("h4",{id:"tracks-transaction-ids"},"Tracks Transaction Ids"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"keeps transactions in allTxs given it receives a ReqTx")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"removes transactions in allTxs given it receives a ReqSn")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"removes transactions from allTxs when included in a acked snapshot even when emitting a ReqSn")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if one signature was from a different snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if one signature was from a different key")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if one signature was from a completely different message")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects last AckSn if already received signature from this party")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive a snapshot with transaction not applicable on previous snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive a snapshot with unseen transactions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive an AckSn for an unseen snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects if we receive a too far future snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"waits if we receive a future snapshot while collecting signatures")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"acks signed snapshot from the constant leader")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not ack snapshots from non-leaders")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects too-old snapshots")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects too-old snapshots when collecting signatures")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects too-new snapshots from the leader")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rejects overlapping snapshot requests from the leader")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores in-flight ReqTx when closed")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"everyone does collect on last commit after collect com")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"cannot observe abort after collect com")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"cannot observe collect com after abort")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"notifies user on head closing and when passing the contestation deadline")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"contests when detecting close with old snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"re-contests when detecting contest with old snapshot")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignores closeTx for another head"))),(0,l.kt)("h3",{id:"types"},"Types"),(0,l.kt)("h4",{id:"json-encoding-of-headstate-simpletx"},"JSON encoding of (HeadState SimpleTx)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/HeadState SimpleTx.json"))),(0,l.kt)("h4",{id:"json-encoding-of-event-simpletx"},"JSON encoding of (Event SimpleTx)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/Event SimpleTx.json"))),(0,l.kt)("h2",{id:"hydrafireforget"},"Hydra.FireForget"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"client can send 'Hail Hydra!' to server")),(0,l.kt)("h2",{id:"hydracrypto"},"Hydra.Crypto"),(0,l.kt)("h3",{id:"multisignature"},"MultiSignature"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is sensitive to order"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 54 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"aggregate/verifyMultiSignature roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"aggregateInOrder/verifyMultiSignature roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 11 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"verifyMultiSignature fails when signature is missing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 86 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not validate multisig if less keys given"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 23 discarded (9% empty).\n"))))),(0,l.kt)("h3",{id:"signature"},"Signature"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"show includes escaped hex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can sign arbitrary messages"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 30 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sign/verify roundtrip"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"verificationkey"},"VerificationKey"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"show includes escaped hex")),(0,l.kt)("h4",{id:"json-encoding-of-verificationkey-hydrakey"},"JSON encoding of (VerificationKey HydraKey)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/VerificationKey HydraKey.json"))),(0,l.kt)("h3",{id:"signingkey"},"SigningKey"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"show includes escaped hex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can be generated when seed exceeds the max seed size for algorithm")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can be generated"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests; 30 discarded.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arbitrary @(SigningKey HydraKey) is reasonably collision resistant"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100000 tests.\n"))))),(0,l.kt)("h2",{id:"hydrachaindirectwallet"},"Hydra.Chain.Direct.Wallet"),(0,l.kt)("h3",{id:"newtinywallet"},"newTinyWallet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"initialises wallet by querying UTxO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"re-queries UTxO from the tip, even on reset"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"prefers largest utxo"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"coverfee"},"coverFee"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"balances transaction with fees"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"applytxs"},"applyTxs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"only reduces the UTXO set when no address is ours"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Seen inputs are consumed and not in the resulting UTXO"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"gentxsspending--genutxo"},"genTxsSpending / genUTxO"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"are well-suited for testing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n39% has dependent txs\n27% has no tx that are ours\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecttx"},"Hydra.Chain.Direct.Tx"),(0,l.kt)("h3",{id:"collectcomtx"},"collectComTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"cover fee correctly handles redeemers"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 60 tests:\n83% Script(s) execution failed\n17% No fuel UTxO found\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Ignore InitTx with wrong contestation period"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 60 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Ignore InitTx with wrong cardano keys"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 60 tests.\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecttimehandle"},"Hydra.Chain.Direct.TimeHandle"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can roundtrip currentPointInTime"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"should convert slot within latest/current era"))),(0,l.kt)("h2",{id:"hydrachaindirectstate"},"Hydra.Chain.Direct.State"),(0,l.kt)("h3",{id:"acceptance"},"acceptance"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can close & fanout every collected head"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n50% collect failed already\n50% collect, close and fanout passed\n"))))),(0,l.kt)("h3",{id:"fanout"},"fanout"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n54% Fanout size: 40-58\n28% Fanout size: 10-40\n18% Fanout size: 1-10\n\n51% 6kB\n27% 4kB\n22% 5kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n54% Fanout size: 40-58\n28% Fanout size: 10-40\n18% Fanout size: 1-10\n"))))),(0,l.kt)("h3",{id:"contest"},"contest"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests (100% 1kB).\n\nClose point (slot) (100 in total):\n100% > 0\n\nContestation period (100 in total):\n18% k blocks on mainnet\n17% one month\n15% one day\n14% one week\n13% < k blocks\n13% one year\n10% > k blocks\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nClose point (slot) (100 in total):\n100% > 0\n\nContestation period (100 in total):\n18% k blocks on mainnet\n17% one month\n15% one day\n14% one week\n13% < k blocks\n13% one year\n10% > k blocks\n"))))),(0,l.kt)("h3",{id:"close"},"close"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n89% ConfirmedSnapshot\n11% InitialSnapshot\n\n97% 1kB\n 3% 0kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n89% ConfirmedSnapshot\n11% InitialSnapshot\n"))))),(0,l.kt)("h3",{id:"collectcom"},"collectCom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n72% 2kB\n28% 1kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"abort"},"abort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n59% Abort after some (but not all) commits\n23% Abort immediately, after 0 commits\n18% Abort after all commits\n\n50% 5kB\n49% 4kB\n 1% 6kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n59% Abort after some (but not all) commits\n23% Abort immediately, after 0 commits\n18% Abort after all commits\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ignore aborts of other heads"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"commit"},"commit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n85% Non-empty commit\n15% Empty commit\n\n100% 0kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n85% Non-empty commit\n15% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"consumes all inputs that are committed"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n85% Non-empty commit\n15% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can only be applied / observed once"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n85% Non-empty commit\n15% Empty commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"reject committing outputs with byron addresses"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"reject committing outputs with reference scripts"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"reject Commits with more than maxMainnetLovelace Lovelace"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"init"},"init"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"transaction size is below 16kB"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n83% 2+ parties\n17% 1 party\n\n74% 4kB\n26% 5kB\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"validates within maxTxExecutionUnits"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n83% 2+ parties\n17% 1 party\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"only proper head is observed"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is not observed if not invited"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"observetx"},"observeTx"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"All valid transitions for all possible states can be observed."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nChainTransition (200 in total):\n20.0% Contest\n19.5% Close\n18.5% Collect\n16.0% Commit\n15.0% Fanout\n11.0% Init\n"))))),(0,l.kt)("h3",{id:"plutuspubkeyhash"},"Plutus.PubKeyHash"),(0,l.kt)("h4",{id:"json-encoding-of-pubkeyhash"},"JSON encoding of PubKeyHash"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/PubKeyHash.json"))),(0,l.kt)("h3",{id:"chainstate"},"ChainState"),(0,l.kt)("h4",{id:"json-encoding-of-chainstate"},"JSON encoding of ChainState"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ChainState.json"))),(0,l.kt)("h2",{id:"hydrachaindirectscriptregistry"},"Hydra.Chain.Direct.ScriptRegistry"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"newScriptRegistry (registryUTxO r) === Just r"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydrachaindirecthandlers"},"Hydra.Chain.Direct.Handlers"),(0,l.kt)("h3",{id:"localchainstate"},"LocalChainState"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can resume from chain state"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n26% Rollback 2 blocks\n21% Rollback 5 blocks\n16% Rollback 3 blocks\n16% Rollback 4 blocks\n12% Rollback 1 blocks\n 9% Rollback 0 blocks\n"))))),(0,l.kt)("h3",{id:"chainsynchanlder"},"chainSyncHanlder"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roll forward results in Tick events"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"roll forward fails with outdated TimeHandle"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"observes transactions onRollForward"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n22% Close\n20% Contest\n18% Collect\n16% Fanout\n14% Init\n10% Commit\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"rollbacks state onRollBackward"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n17% Rollback to: ChainSlot 0 / 5\n13% Rollback to: ChainSlot 0 / 3\n12% Rollback to: ChainSlot 0 / 2\n 8% Rollback to: ChainSlot 0 / 4\n 8% Rollback to: ChainSlot 1 / 4\n 8% Rollback to: ChainSlot 2 / 2\n 6% Rollback to: ChainSlot 1 / 2\n 4% Rollback to: ChainSlot 3 / 5\n 4% Rollback to: ChainSlot 4 / 4\n 4% Rollback to: ChainSlot 4 / 5\n 3% Rollback to: ChainSlot 2 / 3\n 3% Rollback to: ChainSlot 3 / 3\n 3% Rollback to: ChainSlot 3 / 4\n 2% Rollback to: ChainSlot 1 / 5\n 2% Rollback to: ChainSlot 5 / 5\n 1% Rollback to: ChainSlot 1 / 3\n 1% Rollback to: ChainSlot 2 / 4\n 1% Rollback to: ChainSlot 2 / 5\n"))))),(0,l.kt)("h2",{id:"hydrachaindirectcontract"},"Hydra.Chain.Direct.Contract"),(0,l.kt)("h3",{id:"fanout-1"},"Fanout"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n\nFanoutMutation (100 in total):\n36% MutateChangeOutputValue\n33% MutateValidityBeforeDeadline\n31% MutateAddUnexpectedOutput\n"))))),(0,l.kt)("h3",{id:"contest-1"},"Contest"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nContestMutation (200 in total):\n 7.5% MutateTokenMintingOrBurning\n 7.5% NotUpdateDeadlineAlthoughItShould\n 7.0% MutateInputContesters\n 7.0% MutateToNonNewerSnapshot\n 6.0% MutateContestUTxOHash\n 6.0% MutateValidityPastDeadline\n 6.0% MutateValueInOutput\n 5.5% MutateHeadIdInOutput\n 5.5% MutateMultipleRequiredSigner\n 5.0% MutateRequiredSigner\n 4.5% MutateContesters\n 4.5% MutateNoRequiredSigner\n 4.5% MutateSignatureButNotSnapshotNumber\n 4.0% ContestFromDifferentHead\n 4.0% PushDeadlineAlthoughItShouldNot\n 3.5% MutateOutputContestationPeriod\n 3.5% MutatePartiesInOutput\n 3.0% MutateSnapshotNumberButNotSignature\n 3.0% SnapshotNotSignedByAllParties\n 2.5% NotContinueContract\n"))))),(0,l.kt)("h3",{id:"closeinitial"},"CloseInitial"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 400 tests.\n\nCloseInitialMutation (400 in total):\n100.0% MutateCloseContestationDeadline'\n"))))),(0,l.kt)("h3",{id:"close-1"},"Close"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nCloseMutation (200 in total):\n 7.5% CloseFromDifferentHead\n 7.5% MutateContestationDeadline\n 7.5% MutateInfiniteLowerBound\n 7.0% MutateRequiredSigner\n 7.0% MutateSnapshotNumberButNotSignature\n 6.0% MutateCloseUTxOHash\n 6.0% MutateMultipleRequiredSigner\n 6.0% MutateValidityInterval\n 5.5% MutateHeadIdInOutput\n 5.0% MutatePartiesInOutput\n 5.0% MutateSignatureButNotSnapshotNumber\n 5.0% SnapshotNotSignedByAllParties\n 4.5% MutateInfiniteUpperBound\n 4.0% MutateTokenMintingOrBurning\n 3.5% MutateContesters\n 3.5% MutateSnapshotNumberToLessThanEqualZero\n 3.5% MutateValueInOutput\n 3.0% MutateNoRequiredSigner\n 3.0% NotContinueContract\n"))))),(0,l.kt)("h3",{id:"collectcom-1"},"CollectCom"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nCollectComMutation (200 in total):\n15.0% MutateCommitToInitial\n15.0% MutateHeadId\n14.0% MutateTokenMintingOrBurning\n13.0% MutateNumberOfParties\n13.0% MutateOpenUTxOHash\n11.0% ExtractSomeValue\n10.0% MutateRequiredSigner\n 9.0% NotContinueContract\n"))))),(0,l.kt)("h3",{id:"commit-1"},"Commit"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nCommitMutation (200 in total):\n15.0% RecordAllCommittedUTxO\n15.0% UsePTFromDifferentHead\n14.0% MutateTokenMintingOrBurning\n13.0% MutateCommittedAddress\n13.0% MutateCommittedValue\n11.0% MutateCommitOutputValue\n10.0% MutateRequiredSigner\n 9.0% NonContinuousHeadId\n"))))),(0,l.kt)("h3",{id:"abort-1"},"Abort"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nAbortMutation (200 in total):\n12.0% MutateUseDifferentHeadToAbort\n10.5% MutateThreadTokenQuantity\n10.0% ExtractValue\n 9.5% MintOnAbort\n 9.5% ReorderCommitOutputs\n 9.0% DropOneCommitOutput\n 9.0% UseInputFromOtherHead\n 8.5% BurnOneTokenMore\n 8.5% DropCollectedInput\n 7.0% MutateRequiredSigner\n 6.5% MutateParties\n"))))),(0,l.kt)("h3",{id:"init-1"},"Init"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"is healthy"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not survive random adversarial mutations"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 200 tests.\n\nInitMutation (200 in total):\n18.0% MutateDropSeedInput\n16.5% MutateSeedInDatum\n15.5% MutateDropInitialOutput\n15.0% MutateInitialOutputValue\n13.5% MutateAddAnotherPT\n11.0% MutateHeadIdInDatum\n10.5% MintTooManyTokens\n"))))),(0,l.kt)("h3",{id:"serializing-commits"},"Serializing commits"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"deserializeCommit . serializeCommit === id"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"txout-hashing"},"TxOut hashing"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"OffChain.hashUTxO == OnChain.hashTxOuts (on sorted tx outs)"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 20 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"OnChain.hashPreSerializedCommits == OnChain.hashTxOuts (on sorted tx outs)"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 20 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does care about ordering of TxOut"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 20 tests; 24 discarded.\n"))))),(0,l.kt)("h3",{id:"signature-validator"},"Signature validator"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"verifies single signature produced off-chain"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"verifies snapshot multi-signature for list of parties and signatures"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h2",{id:"hydrabehavior"},"Hydra.Behavior"),(0,l.kt)("h3",{id:"rolling-back--forward-does-not-make-the-node-crash"},"rolling back & forward does not make the node crash"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"does work for rollbacks past init"),(0,l.kt)("li",{parentName:"ul"},"does work for rollbacks past open")),(0,l.kt)("h3",{id:"hydra-node-logging"},"Hydra Node Logging"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"traces processing of events"),(0,l.kt)("li",{parentName:"ul"},"traces handling of effects")),(0,l.kt)("h4",{id:"json-encoding-of-hydranodelog-simpletx"},"JSON encoding of (HydraNodeLog SimpleTx)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/HydraNodeLog SimpleTx.json"))),(0,l.kt)("h3",{id:"two-participant-head"},"Two participant Head"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"only opens the head after all nodes committed"),(0,l.kt)("li",{parentName:"ul"},"can abort and re-open a head when one party has not committed"),(0,l.kt)("li",{parentName:"ul"},"cannot abort head when commits have been collected"),(0,l.kt)("li",{parentName:"ul"},"outputs committed utxo when client requests it")),(0,l.kt)("h4",{id:"in-an-open-head"},"in an open head"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sees the head closed by other nodes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"valid new transactions are seen by all parties")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"valid new transactions get snapshotted")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"snapshots are created as long as transactions to snapshot exist")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"depending transactions stay pending and are confirmed in order")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"depending transactions expire if not applicable in time")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sending two conflicting transactions should lead one being confirmed and one expired")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"outputs utxo from confirmed snapshot when client requests it")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"can be finalized by all parties after contestation period")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"contest automatically when detecting closing with old snapshot"))),(0,l.kt)("h3",{id:"single-participant-head"},"Single participant Head"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"accepts Init command"),(0,l.kt)("li",{parentName:"ul"},"accepts Commit after successful Init"),(0,l.kt)("li",{parentName:"ul"},"can close an open head"),(0,l.kt)("li",{parentName:"ul"},"does not fanout automatically"),(0,l.kt)("li",{parentName:"ul"},"does finalize head after contestation period upon command")),(0,l.kt)("h3",{id:"sanity-tests-of-test-suite"},"Sanity tests of test suite"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"does not delay for real")),(0,l.kt)("h2",{id:"hydraapiserveroutput"},"Hydra.API.ServerOutput"),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-timedserveroutput-tx-babbageera"},"JSON encoding of (ReasonablySized (TimedServerOutput (Tx BabbageEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (TimedServerOutput (Tx BabbageEra)).json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-serveroutput-tx-babbageera"},"JSON encoding of (ReasonablySized (ServerOutput (Tx BabbageEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ServerOutput (Tx BabbageEra)).json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-serveroutput-simpletx"},"JSON encoding of (ReasonablySized (ServerOutput SimpleTx))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ServerOutput SimpleTx).json"))),(0,l.kt)("h2",{id:"hydraapiserver"},"Hydra.API.Server"),(0,l.kt)("h3",{id:"serverspec"},"ServerSpec"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"should fail on port in use")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"greets")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Greetings should contain the hydra-node version")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends sendOutput to all connected clients")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends all sendOutput history to all connected clients after a restart")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"echoes history (past outputs) to client upon reconnection"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n93% more than one message when reconnecting\n 4% no message when reconnecting\n 3% only one message when reconnecting\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"does not echo history if client says no"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests:\n93% more than one message when reconnecting\n 4% no message when reconnecting\n 3% only one message when reconnecting\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"outputs tx as cbor or json depending on the client")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"removes UTXO from snapshot when clients request it")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sequence numbers are continuous and strictly monotonically increasing"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"displays correctly headStatus and snapshotUtxo in a Greeting message")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"greets with correct head status and snapshot utxo after restart")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"sends an error when input cannot be decoded"))),(0,l.kt)("h2",{id:"hydraapihttpserver"},"Hydra.API.HTTPServer"),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-transactionsubmitted"},"JSON encoding of (ReasonablySized TransactionSubmitted)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized TransactionSubmitted.json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-submittxrequest"},"JSON encoding of (ReasonablySized SubmitTxRequest)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized SubmitTxRequest.json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-draftcommittxrequest"},"JSON encoding of (ReasonablySized DraftCommitTxRequest)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized DraftCommitTxRequest.json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-draftcommittxresponse"},"JSON encoding of (ReasonablySized DraftCommitTxResponse)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized DraftCommitTxResponse.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commit publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /commit subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /cardano-transaction publish api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Validate /cardano-transaction subscribe api schema"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 1 test.\n"))))),(0,l.kt)("h3",{id:"api-should-respond-correctly"},"API should respond correctly"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"GET /protocol-parameters works")),(0,l.kt)("h2",{id:"hydraapiclientinput"},"Hydra.API.ClientInput"),(0,l.kt)("h3",{id:"fromjson-validatedtx-era"},"FromJSON (ValidatedTx era)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"accepts transactions produced via cardano-cli"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"accepts raw CBOR-base16-encoded transactions"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n"))))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-clientinput-tx-babbageera"},"JSON encoding of (ReasonablySized (ClientInput (Tx BabbageEra)))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ClientInput (Tx BabbageEra)).json"))),(0,l.kt)("h3",{id:"json-encoding-of-reasonablysized-clientinput-simpletx"},"JSON encoding of (ReasonablySized (ClientInput SimpleTx))"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"allows to encode values with aeson and read them back"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Details"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"+++ OK, passed 100 tests.\n")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"produces the same JSON as is found in golden/ReasonablySized (ClientInput SimpleTx).json"))))}m.isMDXComponent=!0}}]);